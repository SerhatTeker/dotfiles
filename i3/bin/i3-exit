#!/usr/bin/env bash
# -*- coding: utf-8 -*-
# vim: set ft=sh et ts=4 sw=4 sts=4:

# Bash safeties: exit on error, no unset variables, pipelines can't hide errors
set -o errexit
set -o nounset
set -o pipefail

# Simple script to handle a DIY shutdown menu. When run you should see a bunch
# of options (shutdown, reboot etc.)
#
# Requirements:
# - rofi
# - systemd, but you can replace the commands for OpenRC or anything else
#
# Instructions:
# - Save this file as i3-exit
# - Give it exec priviledge, or chmod +x /path/to/i3-exit
# - Run it

lock() {
    i3lock
}

all() {
    chosen=$(echo -e "[Cancel]\nLogout\nShutdown\nReboot\nSuspend\nHibernate\nHybrid-sleep\nSuspend-then-hibernate" | rofi -dmenu -i)

    # Info about some states are available here:
    # https://www.freedesktop.org/software/systemd/man/systemd-sleep.conf.html#Description
    if [[ $chosen = "Logout" ]]; then
        i3-msg exit
    elif [[ $chosen = "Shutdown" ]]; then
        logout-sync && systemctl poweroff
    elif [[ $chosen = "Reboot" ]]; then
        systemctl reboot
    elif [[ $chosen = "Suspend" ]]; then
        systemctl suspend
    elif [[ $chosen = "Hibernate" ]]; then
        systemctl hibernate
    elif [[ $chosen = "Hybrid-sleep" ]]; then
        systemctl hibernate
    elif [[ $chosen = "Suspend-then-hibernate" ]]; then
        systemctl suspend-then-hibernate
    fi
}

main() {
    chosen=$(echo -e "[Cancel]\nLogout\nShutdown\nReboot\nSuspend" | rofi -dmenu -i)

    # Info about some states are available here:
    # https://www.freedesktop.org/software/systemd/man/systemd-sleep.conf.html#Description
    if [[ $chosen = "Logout" ]]; then
        i3-msg exit
    elif [[ $chosen = "Shutdown" ]]; then
        # logout-sync && sudo shutdown -h now
        logout-sync && systemctl poweroff
    elif [[ $chosen = "Reboot" ]]; then
        systemctl reboot
    elif [[ $chosen = "Suspend" ]]; then
        systemctl suspend
    fi
}

# all
main
