{
  "hello": {
    "prefix": "hello",
    "body": [
      "print(\"Hello, World!\")"
    ],
    "description": "print Hello, World!"
  },
  "breakpoint()": {
    "prefix": "bp",
    "body": "breakpoint()$0",
    "description": "Debugging breakpoint"
  },
  "LoggerDefault": {
    "prefix": "logger_default",
    "body": [
      "import logging",
      "",
      "logging.basicConfig(",
      "\tlevel=logging.INFO,",
      "\tformat=\"[%(asctime)s] [%(levelname)-7s] : %(message)s\",",
      "\tdatefmt=\"%Y-%m-%d %H:%M:%S %z\"",
      ")",
      "",
      "logger = logging.getLogger(__name__)\n$0"
    ],
    "description": "Default logger"
  },
  "Logger": {
    "prefix": "logger",
    "body": [
      "import logging",
      "",
      "from rich.logging import RichHandler",
      "",
      "logging.basicConfig(",
      "\tlevel=logging.INFO,",
      "\tformat=\"%(message)s\",",
      "\tdatefmt=\"%Y-%m-%d %H:%M:%S %z\",",
      "\thandlers=[RichHandler(rich_tracebacks=True)],",
      ")",
      "",
      "logger = logging.getLogger(__name__)\n$0"
    ],
    "description": "Logger with RichHandler"
  },
  "log.info(f\"{$1}\")": {
    "prefix": "logi",
    "body": "logger.info(f\"{$1 = }\")",
    "description": "Log variable info"
  },
  "log currency": {
    "prefix": "logcur",
    "body": "logger.info(f\"$1{$2:,.2f}\")",
    "description": "Log currency info"
  },
  "@pytest.mark.current": {
    "prefix": "pycur",
    "body": "@pytest.mark.current$0",
    "description": "pytest current mark"
  },
  "debugmethod(func)": {
    "prefix": "debugmethod",
    "body": [
      "def debugmethod(func):",
      "\t\"\"\" Debug a method and return it back \"\"\"",
      "\timport functools",
      "",
      "\t@functools.wraps(func)",
      "\tdef wrapper(*args, **kwargs):",
      "\t\tresult = func(*args, **kwargs)",
      "",
      "\t\ttry:",
      "\t\t\tlogger.info(f'Calling : {func.__name__}')",
      "\t\t\tlogger.info(f'args: {args} - kwargs: {kwargs}')",
      "\t\t\tlogger.info(f'{func.__name__} returned {result}')",
      "\t\texcept Exception:",
      "\t\t\tprint(f'Calling : {func.__name__}')",
      "\t\t\tprint(f'args: {args} - kwargs: {kwargs}')",
      "\t\t\tprint(f'{func.__name__} returned {result}')",
      "",
      "\t\treturn result",
      "\treturn wrapper\n$0"
    ],
    "description": "Debug method helper function"
  },
  "timerun(func)": {
    "prefix": "timerun",
    "body": [
      "def timerun(func):",
      "\t\"\"\" Calculate the execution time of a method and return it back \"\"\"",
      "\timport functools",
      "\timport time",
      "",
      "\t@functools.wraps(func)",
      "\tdef wrapper(*args, **kwargs):",
      "\t\tstart = time.perf_counter()",
      "\t\tresult = func(*args, **kwargs)",
      "\t\tduration = time.perf_counter() - start",
      "\t\tmsg = f\"Duration of {func.__name__} function was {duration} sec\"",

      "",
      "\t\ttry:",
      "\t\t\tlogger.info(msg)",
      "\t\texcept NameError:",
      "\t\t\tprint(msg)",
      "",
      "\t\treturn result",
      "\treturn wrapper\n$0"
    ],
    "description": "timerun helper function"
  },
  "future()": {
    "prefix": ["future", "annotations"],
    "body": "from __future__ import annotations",
    "description": "Future annotations"
  }
}
