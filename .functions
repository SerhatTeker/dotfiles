#!/bin/bash
#
#		     __			         _   _
#		    / _|_   _ _ __   ___| |_(_) ___  _ __  ___
#		   | |_| | | | '_ \ / __| __| |/ _ \| '_ \/ __|
#		   |  _| |_| | | | | (__| |_| | (_) | | | \__ \
#		   |_|	\__,_|_| |_|\___|\__|_|\___/|_| |_|___/
#
# Author: Serhat Teker <serhat.teker@gmail.com>
# Source: https://github.com/SerhatTeker/dotfiles
#
# to handle more complex tasks than alias

# Apps {{{1
# ----------------------------------------------------------------------------#

# Toggle Telegram On/Off
telegram() {
    if pgrep Telegram; then
        pkill Telegram
    else
        nohup $APPS_DIR/Telegram/Telegram >/dev/null 2>&1 &
    fi
}

# night light mode
night-toggle() {
    CURRENT=$(gsettings get org.gnome.settings-daemon.plugins.color night-light-enabled)
    if $CURRENT; then
        gsettings set org.gnome.settings-daemon.plugins.color night-light-enabled false
    else
        gsettings set org.gnome.settings-daemon.plugins.color night-light-enabled true
    fi
}

# }}}1

# Back Up {{{1
# ----------------------------------------------------------------------------#

# back-up all {{{2

bak-all(){
	. $(find "$SCRIPTS_DIR/" -name "bu-all.sh" 2>/dev/null)
}
# }}}2

# back-up pri {{{2

bu-lock-pri(){
	. $(find "$SCRIPTS_DIR/" -name "bu-lock-pri.sh" 2>/dev/null)
}

bu-unlock-pri(){
	. $(find "$SCRIPTS_DIR/" -name "bu-unlock-pri.sh" 2>/dev/null)
}
# }}}2

# compare files {{{2

# hash two files and compare their hashes
check-hsum() {
	echo "$(shasum -a 256 $1)"
    echo "$(shasum -a 256 $2)"
	if [[ "$(shasum -a 256 $1 | awk '{print $1}')" == "$(shasum -a 256 $2 | awk '{print $1}')" ]]; then
		echo "Equal"
	else
		echo "NOT equal"
	fi
}

# hsum alternative
ecmp() {
	if cmp -s "$1" "$2"; then
		echo "eq"
	else
		echo "neq"
	fi
}
# }}}2
# }}}1

# Dirs {{{1
# ----------------------------------------------------------------------------#

# Open DIR
# run it in the background
f() {
	# if $1 empty open $HOME
	# -w to open it in a new window
	if [ -z "$1" ];then
		nohup nautilus -w "$HOME" >/dev/null 2>&1 &
	else
		nohup nautilus -w "$1" >/dev/null 2>&1 &
	fi
}

# cd then ll
cdl() {
	builtin cd "$@" && ls -ahlF
}

# make dir then cd
mkcd () {
	mkdir -p "$1" && cd "$1"
}

# shortcut : cd $DIR then run nvim -s
cv () {
    # takes first argument as $DIR
    _ARG="$@"
    _DIR="$HOME"

    if [ "$_ARG" = "dot" ]; then
        _DIR=$DOTFILES_DIR
    elif [ "$_ARG" = "bak" ]; then
        _DIR=$SYSTEM_BAK_DIR
    else
        _DIR=$_ARG
    fi

    builtin cd "$_DIR" && nvim -S
    # builtin cd "$@" && nvim -S
}

# Zip Tar {{{2

tar-it () {
	dirorfile="$1"
	destination="$1.tar.gz"

	tar -czvf $destination $dirorfile
}

untar-it () {
	file="$1"
	filename="${file%%.*}"

	# alternative to get the filename
	# filename=$(basename -- "$fullfile")
	# extension="${filename##*.}"
	# filename="${filename%.*}"

	tar -xzvf $file $filename
}

unzip-it () {
    zipfile="$1"
    zipdir=${1%.zip}

    unzip -d "$zipdir" "$zipfile"
}

extract-it() {
	# With the above code in your .bashrc, typing an x followed by a filename will
	# extract most archives you come across (assuming you have the packages needed to
	# extract that type of archive).
	if [ -f $1 ] ; then
		case $1 in
			*.tar.bz2)   tar xvjf $1    ;;
			*.tar.gz)    tar xvzf $1    ;;
			*.bz2)       bunzip2 $1     ;;
			*.rar)       unrar x $1     ;;
			*.gz)        gunzip $1      ;;
			*.tar)       tar xvf $1     ;;
			*.tbz2)      tar xvjf $1    ;;
			*.tgz)       tar xvzf $1    ;;
			*.zip)       unzip $1       ;;
			*.Z)         uncompress $1  ;;
			*.7z)        7z x $1        ;;
			*)           echo "Unable to extract '$1'" ;;
		esac
	else
			echo "'$1' is not a valid file"
	fi
}
# }}}2
# }}}1

# Environment {{{1
# ----------------------------------------------------------------------------#

# Install python package globally
# Use 3.8 if $PYTHON_VERSION not set
pipg() {
    VERSION=${PYTHON_VERSION:-3.8}
    PIP_REQUIRE_VIRTUALENV=false python${VERSION} -m pip "$@"
}
# Python venv auto-load {{{2

# If a virtualenv with name of .venv, load it.
auto-venv() {
	if [ -z "$VIRTUAL_ENV" ]; then
		if [ -d .venv/ ]; then
			source .venv/bin/activate
		fi
	fi
}
# }}}2
# }}}1

# Files {{{1
# ----------------------------------------------------------------------------#
bu-tmux-resurrect() {
	# make bu dir if not exist
	mkdir -p $TMUX_RESURRECT/bu
	# backup newest one
	cp $(ls -lt $TMUX_RESURRECT/tmux_*.txt | head -n 1 | awk '{print $9}') $TMUX_RESURRECT/bu/
	# clean all backups except newest one
	ls -lt $TMUX_RESURRECT/tmux_*.txt | awk '{if(NR!=1) print $9}' | xargs -i rm {}
}

# replace whitespaces with underscores in filenames
replace-spaces() {
    ARG=$1

    if [[ -d $ARG ]]; then
        for file in ${ARG}/*
        do
            mv $file ${file// /_}
        done
    elif [[ -f $ARG ]]; then
        mv ${ARG} ${ARG// /_}
    else
        echo "Provided ${ARG} is not valid"
        exit 1
    fi
}

add-file-suffix-all() {
	find . -type f -not -name "*.$1" -exec mv "{}" "{}.$1" \;
}

delete-file-part() {
	suffix=$1
	delete_part="$2"

	for filename in *.$suffix; do
		[ -f "$filename" ] || continue
		mv "$filename" "${filename//$delete_part/}"
	done
}

# move only files
mvf() {
    find $1 -maxdepth 1 -type f -exec mv {} $2 \;
}
# }}}1

# Git {{{1
# ----------------------------------------------------------------------------#

# Outputs the name of the current branch
# Usage example: git pull origin $(git_current_branch)
# Using '--quiet' with 'symbolic-ref' will not cause a fatal error (128) if
# it's not a symbolic ref, but in a Git repo
git-current-branch() {
	local ref
	ref=$(command git symbolic-ref --quiet HEAD 2> /dev/null)
	local ret=$?
	if [[ $ret != 0 ]]; then
		[[ $ret == 128 ]] && return  # no git repo.
		ref=$(command git rev-parse --short HEAD 2> /dev/null) || return
	fi
	echo ${ref#refs/heads/}
}

# sync upstream fork with local
git-sync-fork() {
	# Fetch all branches of remote upstream
	# Rewrite master with upstreamâ€™s master using git rebase:
	git fetch upstream && \
		git rebase upstream/master
}

# Delete branch local and remote
git-prune-branch() {
    BRANCH=$1
    REMOTE="origin"

    if [ "$2" != "" ]; then
        # Positional parameter $2 is not empty
        REMOTE=$1
        BRANCH=$2
    fi

    git branch -d $BRANCH
    git push -d $REMOTE $BRANCH
}

# Download all files from a github gist url
# Usage Example: $ ddl-gist 'https://gist.github.com/7fee6d84f2f3d16ef3628e9a4a7f57e7' ~/Downloads/gists
ddl-gist(){
	if [ $# -ne 2 ];
	then
		echo 'Failed. Syntax: $> ddl-gist GITHUB_GIST_URL DOWNLOAD_PATH'
		return
	fi

	gist_url=$1
	download_path=$2

	echo '[*] Getting all GIST File URLs from '$gist_url

	gists=`curl -ksL -H 'User-Agent: Mozilla/5.0' $gist_url  | grep '<a\ .*href=".*/raw/' | sed 's/.*a\ .*href="//' | sed 's/".*//'`
	echo '[*] Downloading all files'

	for lines in `echo $gists | xargs -L1`;
	do
		if [ ! -z $lines ];
		then
			echo $lines
			gistfile=`echo $lines | sed 's/.*\///'`
			save_as=$download_path"/"$gistfile
			echo "Downloading URL: https://gist.github.com"$lines
			echo "to "$save_as"....."
			wget -c -O $save_as "https://gist.github.com"$lines
		fi
	done
}
# }}}

# Journal {{{1
# ----------------------------------------------------------------------------#

# journal in vim
journal(){
    # Show current journal
    WNUMBER=$(date +%U)
    YNUM=$(date +%y)
    echo "JOURNAL: y${YNUM}/w${WNUMBER}"

	# check journal exist, if not exist create
    journal-check
}

tj(){
	. $(find "$SCRIPTS_DIR/" -name "journalStartAll" 2>/dev/null)
}
# }}}1

# Languages {{{

# Python

# Create and activate a virtual environment with global packages
cvenv() {
    VERSION=${PYTHON_VERSION:-3.8}
    PYTHON="python${VERSION}"
    VENV=.venv

    ${PYTHON} -m venv ${VENV} --system-site-packages \
        && source ${VENV}/bin/activate
}
# }}}

# Network {{{1
# ----------------------------------------------------------------------------#

myip() {
	curl ifconfig.me
}

# alternative to myip
myip-echo() {
	curl http://ipecho.net/plain; echo
}
# }}}1

# Other {{{1
# ----------------------------------------------------------------------------#

# prints Dennis Ritchie
unix-print () {
	. $(find "$SCRIPTS_DIR/" -name "unix-print" 2>/dev/null)
}

# get last apt-get update date
info-update-last () {
	ls -lt --time-style="long-iso" /var/log/apt | grep -o '\([0-9]\{2,4\}[- ]\)\{3\}[0-9]\{2\}:[0-9]\{2\}' -m 1
}

ssh-joke() {
	ssh -X user@192.168.0.112 DISPLAY=:0 notify-send 'HAHA I am In Your Computer!' 'Deleting all your stuff!' -u critical -i face-worried
}

history-statistic() {
	#A one-liner allows us to see our most used commands
	history | \
		awk '{CMD[$2]++;count++;}END { for (a in CMD)print CMD[a] " " CMD[a]/count*100 "% " a;}' | \
		grep -v "./" | column -c3 -s " " -t | sort -nr | nl |  head -n10
}
# }}}1

# Security {{{1
# ----------------------------------------------------------------------------#

# encrypt given file
# must cd into dir first
# TODO: dir agnostic
enc-file() {
	cat "$1" | gpg --armor --output "$1.gpg" --symmetric --cipher-algo AES256
}

# decrypt given file
# must cd into dir first
# TODO: dir agnostic
dec-file() {
	gpg --output "$(echo $1 | cut -d '.' -f1).$(echo $1 | cut -d '.' -f2)" --decrypt "$1"
}
# }}}1

# Update {{{1
# ----------------------------------------------------------------------------#

_update-all() {
	sudo apt update && \
		sudo apt -y upgrade && \
		notify-send 'Updates Complete' \
			'Your system updated successfully!' \
			-u normal -t 7500 -i checkbox-checked-symbolic
}
# }}}1

# Logout {{{

logout-sync() {
    logout-sync-private
}
# }}}1
