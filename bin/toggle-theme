#!/usr/bin/env bash
# -*- coding: utf-8 -*-
# vim: set ft=sh et ts=4 sw=4 sts=4:
# =================================================================================================
#
# Copyright 2022 Serhat Teker <me@serhatteker.com>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
#
# File                  : toggle-theme
# Descrtiption          : Toggle theme mode on Ubuntu 22.04 LTS and MacOS Monterey 12
# Author                : Serhat Teker <me@serhatteker.com>
# Date                  : 2022-04-23T15:41:00+0300 | 1650717660
# Last Modified Date    : 2024-03-03T12:22:44+03:00 | 1709457764
# Notes                 : Using <neodark> as dark mode and <one> as light mode. Tested
# and using on Ubuntu 22.04 LTS and MacOS Monterey 12.
# Usage                 : $ ./toggle-theme
#
# or pass theme flag to use the specific theme:
# Light mode
# $ ./toggle-theme -l|--light|l|light
# Dark mode
# $ ./toggle-theme -d|--dark|d|dark
#
#
# Note to MacOS
# May need to add your terminal (e.g. Alacritty) in accessibility:
# Privacy & Security > Accessibility
# =================================================================================================

# Bash safeties: exit on error, no unset variables, pipelines can't hide errors
set -o errexit
set -o nounset
set -o pipefail

# Check OS {{{
# Helper functions

is_linux() {
    local uname="$(uname -a)"
    [[ "$uname" =~ Linux ]] && return
    false
}

is_macos() {
    local uname="$(uname -a)"
    [[ "$uname" =~ Darwin ]] && return
    false
}

is_different_os() {
    if is_linux && is_macos; then
        echo "OSTYPE: ${OSTYPE} is not implemented"
        exit 1
    fi
}
# }}}

# General {{{

nvim_toggle() {
    local nvr_bin=$(command -v nvr)
    local server_list=$($nvr_bin --serverlist)

    for addr in ${server_list}; do
        if [[ ${target_mode} =~ "light" ]]; then
            ${nvr_bin} --servername "${addr}" -c "set background=light"
            ${nvr_bin} --servername "${addr}" -c "AdaptGlobalTheme"
        else
            ${nvr_bin} --servername "${addr}" -c "AdaptGlobalTheme"
        fi
    done
}

alacritty_toggle() {
    local theme_path="${HOME}/dotfiles/alacritty/colors"

    # Rotating between gruvbox and one
    if [[ ${target_mode} =~ "light" ]]; then
        ${sed_bin} -i 's/*theme_dark/*theme_light/g' "${theme_path}/one.yml"
        ${sed_bin} -i 's/*theme_dark/*theme_light/g' "${theme_path}/gruvbox.yml"
    else
        ${sed_bin} -i 's/*theme_light/*theme_dark/g' "${theme_path}/one.yml"
        ${sed_bin} -i 's/*theme_light/*theme_dark/g' "${theme_path}/gruvbox.yml"
    fi
}

tmux_toggle() {
    local file="${HOME}/dotfiles/tmux/tmux.conf"

    if [[ ${target_mode} =~ "light" ]]; then
        ${sed_bin} -i 's/dark.conf/light.conf/g' "${file}"
    else
        ${sed_bin} -i 's/light.conf/dark.conf/g' "${file}"
    fi

    ${tmux_bin} source "${file}"
}

# i3 rofi - only for linux
rofi_toggle() {
    local file="${XDG_CONFIG_HOME}/rofi/config.rasi"

    # Rotating between gruvbox and one
    if [[ ${target_mode} =~ "light" ]]; then
        ${sed_bin} -i 's/gruvbox-dark/gruvbox-light/g' "${file}"
    else
        ${sed_bin} -i 's/gruvbox-light/gruvbox-dark/g' "${file}"
    fi

    # restart i3 config
    i3-msg restart
}
# }}}

# Chrome {{{

# NOTE: Disabled. Open manually
reopen_chrome() {
    # If chrome session exists
    local chrome_bin=/usr/bin/google-chrome-stable
    if [[ -n $(pgrep tmux) ]]; then
        # Close Chrome
        pkill -f chrome

        # Open Chrome again
        if [[ ${target_mode} =~ "light" ]]; then
            ${chrome_bin} \
                >/dev/null 2>&1 &
        else
            nohup ${chrome_bin} \
                --force-dark-mode \
                --enable-features=WebUIDarkMode,CSSColorSchemeUARendering \
                >/dev/null 2>&1 &
        fi
    fi
}

# TODO: Add this to startup or .zprofile/.zshenv etc.
# Close annoying Chrome's Restore Popup in Linux
# https://raspberrypi.stackexchange.com/a/89705
close_restore_popup() {
    local chrome_preferences="${XDG_CONFIG_HOME}/google-chrome/Default/Preferences"

    sed -i 's/"exit_type":"Crashed"/"exit_type":"Normal"/' "${chrome_preferences}"
    sed -i 's/"exited_cleanly":false/"exited_cleanly":true/' "${chrome_preferences}"
}

chrome_toggle() {
    close_restore_popup

    local file="${HOME}/.local/share/applications/google-chrome.desktop"
    local default='\/usr\/bin\/google-chrome-stable'
    local dark='\/usr\/bin\/google-chrome-stable --force-dark-mode --enable-features=WebUIDarkMode,CSSColorSchemeUARendering'

    if [[ ${target_mode} =~ "light" ]]; then
        sed -i "s/${dark}/${default}/" "${file}"
    else
        sed -i "s/${default}/${dark}/" "${file}"
    fi
}
# }}}

# OS Toggle {{{

gtk_toggle() {
    if [[ ${target_mode} =~ "light" ]]; then
        gsettings set org.gnome.desktop.interface color-scheme 'prefer-light'
        gsettings set org.gnome.desktop.interface gtk-theme "Yaru-light"
    else
        gsettings set org.gnome.desktop.interface color-scheme 'prefer-dark'
        gsettings set org.gnome.desktop.interface gtk-theme "Yaru-dark"
    fi
}

macos_toggle() {
    if [[ ${target_mode} == "light" ]]; then
        osascript -l JavaScript -e "Application('System Events').appearancePreferences.darkMode = false" >/dev/null
    elif [[ ${target_mode} == "dark" ]]; then
        osascript -l JavaScript -e "Application('System Events').appearancePreferences.darkMode = true" >/dev/null
    fi
}

os_toggle() {
    if is_macos; then
        macos_toggle "${target_mode}"
    else
        gtk_toggle "${target_mode}"
        rofi_toggle
        chrome_toggle
    fi
}
# }}}


# Main {{{

display_usage() {
    cat <<EOF
    Toggle the theme for developer workflow from one mode to another
Usages:

1. Just run without flag:
$ ./toggle-theme

2. If you want spesific theme, pass one of the theme flag to use the specific theme:
For light mode:
$ ./toggle-theme -l|--light|l|light
For dark mode:
$ ./toggle-theme -d|--dark|d|dark
EOF
}

error_arg() {
    echo "Unknown argument(s) passed! <${@}>"
    display_usage
    exit 1
}

main() {
    local sed_bin=$(command -v gsed || command -v sed) # MacOS sed is pain, use gsed
    local tmux_bin=$(command -v tmux)
    local target_mode="dark" # Default theme mode is dark

    # No mode flag. Default usage
    if [[ "$#" -eq 0 ]]; then
        # Check current mode and set target_mode
        if is_linux; then
            local theme="$(gsettings get org.gnome.desktop.interface gtk-theme)"
            [[ "${theme}" =~ "dark" ]] && local target_mode="light"
        else
            local theme="$(defaults read -g AppleInterfaceStyle)"
            [[ "${theme}" =~ "Dark" ]] && local target_mode="light"
        fi
    # If theme mode passed use it
    elif [[ "$#" -eq 1 ]]; then
        case $1 in
        -d | --dark | d | dark) local target_mode="dark" ;;
        -l | --light | l | light) local target_mode="light" ;;
        -h | --help)
            display_usage
            exit 0
            ;;
        *) error_arg "$@" ;;
        esac
    else
        error_arg "$@"
    fi

    os_toggle
    alacritty_toggle
    tmux_toggle
    nvim_toggle

    echo "Switched to ${target_mode} mode"
}
# }}}

main "$@"
